<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spritePlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* STATUS */
health                      = 100;
hspeed                      = 0;
vspeed                      = 0;
hAccel                      = 1;
vAccel                      = .5;
jumpCount                   = 0;
wallJumpCount               = 0;
wallClimbCount              = 0;
state                       = "floor"

/* HABILITIES */
maxHealth                   = 100;
maxVspeed                   = 31;
maxHspeed                   = 10;//15;
hAccelAir                   = .1;
hAccelGround                = 1;
maxJumpCount                = 1;
jumpSpeed                   = 12;//10;
maxWallJumpCount            = 100;//3;
wallJumpSpeedV              = 8//5;
wallJumpSpeedH              = 7.5//5;
maxWallClimbCount           = 0;//3;
wallClimbSpeed              = 2//5;

/* ENVIORNMENTAL */
inst                        = instance_id;
grav                        =  1;
groundFrictionCoefficient   = .4;
wallFrictionCoefficient     = .2;
bounceCoefficient           = 0;  

/* Animation */
image_index = 6;
image_speed = 0;

/* OTHER */
debug                       = 0;
debug1                      = 0;
debug2                      = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bottom_collision            = collision_rectangle(x-16,y+17,x+15,y+17,objBlock,false,true)
top_collision               = collision_rectangle(x-15,y-16,x+15,y-16,objBlock,false,true)
//wall_collision              = collision_line(x-17,y+17,x+17,y+17,objBlock,false,true) //collision left or right
right_collision             = collision_rectangle(x+17,y-15,x+17,y+15,objBlock,false,true)
left_collision              = collision_rectangle(x-17,y-15,x-17,y+15,objBlock,false,true)
wall_collision              = right_collision != noone || left_collision != noone


debug1 = vspeed &gt;= wallFrictionCoefficient*2
debug2 = vspeed

//Gravity
if(!bottom_collision){ //if no object is underneath
    hAccel=hAccelAir;
    if(!wall_collision &amp;&amp; vspeed&lt;maxVspeed)//If free falling  
        vspeed+=grav;
    else{ //If next to a wall
         if (vspeed &gt;= wallFrictionCoefficient)
            vspeed -=  wallFrictionCoefficient;
         else
            vspeed+=grav;
        
        if(wallJumpCount&lt;maxWallJumpCount &amp;&amp; (keyboard_check_pressed(vk_space)/*||keyboard_check_pressed(vk_left)||keyboard_check_pressed(vk_right)*/)){ //Jump with opposite button in comments
            vspeed=-wallJumpSpeedV;
            wallJumpCount+=1;
            if (right_collision){ //right wall
                    hspeed=-wallJumpSpeedH
                }
            else{ //left wall
                    hspeed=wallJumpSpeedH
                }
            }
        else
        if(wallClimbCount&lt;maxWallClimbCount &amp;&amp; keyboard_check(vk_space) and vspeed&gt;=0){
            vspeed=-wallClimbSpeed;
            wallClimbCount+=1;
            }
        }
}
else
{
    wallJumpCount=0;
    wallClimbCount=0;
    jumpCount=0
    hAccel=hAccelGround;
    if (abs(hspeed)&lt;=groundFrictionCoefficient)
        hspeed=0;
    else{
         if (hspeed&gt;=groundFrictionCoefficient){hspeed-=groundFrictionCoefficient}
         else
         if (hspeed&lt;=groundFrictionCoefficient){hspeed+=groundFrictionCoefficient}
    }
}

//RUN
if(keyboard_check(vk_right)&amp;&amp;!right_collision){
        if (self.hspeed&gt;=maxHspeed)
           hspeed=maxHspeed;
        else
            hspeed+=hAccel;
        }
    else     
        if(keyboard_check(vk_left)&amp;&amp;!left_collision){
            if (self.hspeed&lt;=-maxHspeed)
                hspeed=-maxHspeed;
            else
                hspeed-=hAccel;
        }

//FALL
if(keyboard_check(vk_down)&amp;&amp; !bottom_collision){ /*collision_line(x-16,y+16,x+16,y+16,objBlock,false,false)*/
    if (vspeed&lt;0) vspeed=0;
    //if (vspeed&gt;=maxVspeed)
        vspeed=maxVspeed/2;
        //else
        //vspeed+=vAccel;
}
else //JUMP    
if(jumpCount&lt;maxJumpCount &amp;&amp; keyboard_check(vk_space)&amp;&amp; !top_collision){
        vspeed=-jumpSpeed;
        jumpCount+=1;
}

//Horizontal Collision        
inst = collision_rectangle(x-16+hspeed,y-15,x+16+hspeed,y+15, objBlock, false, false);
if(inst!=noone &amp;&amp; abs(hspeed)&gt;0){
    if (hspeed&gt;0) x = inst.x-32;
    else x = inst.x+32;
//particles(x,y,spriteParticle,0,2,1,10,0,360,.2,2,10);
hspeed=-hspeed*bounceCoefficient;
}

//Vertical Collision
inst = collision_rectangle(x-16,y-15+vspeed,x+15,y+15+vspeed, objBlock, false, false);     
if(inst!=noone){
if (vspeed&gt;0){ 
    y = inst.y-32;
    }
else{ 
    y = inst.y+32;
}
    if (abs(vspeed)&gt;bounceCoefficient+grav)                     //prevent micro bouncing
        vspeed=-vspeed*bounceCoefficient;
    else
        vspeed=0;
   
}

//Animation
if(bottom_collision){ /*running animation between 5-14*/
    if(hspeed!=0){
        image_index += abs(hspeed/maxHspeed);
        image_xscale = abs(hspeed)/hspeed;
        if (image_index &gt; 14 || image_index &lt; 6)
            image_index = 6;
    }
    else{
        image_index += .25;
        if (image_index &gt; 5 || image_index &lt; 0)
            image_index = 0;
    }
}

if(bottom_collision==noone &amp;&amp; wall_collision &amp;&amp; vspeed&gt;0){ //wall Slide
    image_index  = 36;
    if (right_collision)   
       image_xscale = -1;
    else
       image_xscale = 1;
}

if(bottom_collision==noone &amp;&amp; (!wall_collision || vspeed&lt;0 || keyboard_check(vk_down))){ //free fall
    image_index += 3 * (vspeed+hspeed)/(maxHspeed+maxVspeed);
    
    if (hspeed!=0) 
       image_xscale = hspeed/abs(hspeed);
       
    if (image_index &gt; 24 || image_index &lt; 23)
       image_index = 23;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDamageBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health-=.1
if (health&lt;=0)
room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spriteHealth,0,view_xport[0]+16,view_xport[0]+16,2,2,0,c_white,1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

//health
draw_sprite_ext(spriteHealth,0,x-20,y-32,.5,.5,0,c_white,1)

//draw_rectangle_colour(x-20,y-32,x-20-(health*.5),y-32,c_red,c_red,c_red,c_red,c_red)



if(!(collision_line(x-16,y+17,x+15,y+17,objBlock,false,false)))
    if(!(collision_line(x-17,y+17,x+17,y+17,objBlock,false,false)) &amp;&amp; vspeed&lt;maxVspeed)
        draw_rectangle_colour(x-16,y-16+vspeed,x+16,y+16+vspeed,c_red,c_red,c_red,c_red,1);
    else
       draw_rectangle_colour(x-16+hspeed,y-16+vspeed,x+16+hspeed,y+16+vspeed,c_blue,c_blue,c_blue,c_blue,1);


//bottom
draw_rectangle_colour(x-16,y+17,x+15,y+17,c_green,c_green,c_green,c_green,1);
//top
draw_rectangle_colour(x-15,y-16,x+15,y-16,c_green,c_green,c_green,c_green,1);
//wall
draw_rectangle_colour(x-17,y+17,x+17,y+17,c_orange,c_orange,c_orange,c_orange,1);
//right
draw_rectangle_colour(x+17,y-15,x+17,y+15,c_green,c_green,c_green,c_green,1);
//left
draw_rectangle_colour(x-17,y-15,x-17,y+15,c_green,c_green,c_green,c_green,1);

draw_text(x,y-48,debug1);
draw_text(x,y-64,debug2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
